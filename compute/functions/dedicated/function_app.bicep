// *****************************************************************************
//
// File:        function_app.bicep
//
// Description: Creates a Function App.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
// 
// *****************************************************************************

@description('The name of the Application Insights Component.')
param applicationInsightsName string

@description('The name of the App Service Plan.')
param appServicePlanName string

@description('The SKU of the App Service Plan.')
@allowed([
  'B1'
  'B2'
  'B3'
  'P1'
  'P2'
  'P3'
  'P1V2'
  'P2V2'
  'P3V2'
  'P0V3'
  'P1V3'
  'P2V3'
  'P3V3'
  'P1mv3'
  'P2mv3'
  'P3mv3'
  'P4mv3'
  'P5mv3'
  'S1'
  'S2'
  'S3'  
])
param appServicePlanSkuName string

@description('The scope for reuse for the auto-generated domain name label.')
@allowed([
  'NoReuse'
  'ResourceGroupReuse'
  'SubscriptionReuse'
  'TenantReuse'
])
param autoGeneratedDomainNameLabelScope string

@description('The name of the Function App.')
param functionAppName string

@description('The location of the resources.')
param location string = resourceGroup().location

@description('The name of the Log Analytics Workspace.')
param logAnalyticsName string

@description('The operating system of the Function App.')
@allowed([
  'linux'
  'windows'
])
param operatingSystem string

@description('Indicates if the Function App allows public network access.')
@allowed([
  'Disabled'
  'Enabled'
])
param publicNetworkAccess string

@description('Indicates if Application Insights allows public network access for data ingestion.')
@allowed([
  'Disabled'
  'Enabled'
])
param publicNetworkAccessForIngestion string

@description('Indicates if Application Insights allows public network access for querying.')
@allowed([
  'Disabled'
  'Enabled'
])
param publicNetworkAccessForQuery string

@description('The name of the Storage Account.')
param storageAccountName string

@description('The name and version of the Function App runtime.')
@allowed([
  'custom'
  'java8'
  'java11'
  'java17'
  'java21'
  'net48isolated'
  'net8inprocess'
  'net8isolated'
  'net9isolated'
  'node18'
  'node20'
  'node22'
  'powershell74'
  'python39'
  'python310'
  'python311'
  'python312'
])
param runtimeVersion string

type runtimeSetting = {
  inProcNet8Enabled: string?
  javaVersion: string?
  linuxFxVersion: string?
  netFrameworkVersion: string?
  powerShellVersion: string?
  runtimeName: string?
  websiteNodeDefaultVersion: string?
  websiteUsePlaceholderDotnetIsolated: string?
}

// Runtime settings for different frameworks/languages and versions.
var runtimeSettings = {
  custom: {
    inProcNet8Enabled: null
    javaVersion: null
    linuxFxVersion: (isLinux ? '' : null)
    netFrameworkVersion: (isLinux ? null : 'v6.0')
    powerShellVersion: null
    runtimeName: 'custom'
    websiteNodeDefaultVersion: null
    websiteUsePlaceholderDotnetIsolated: null
  }
  java8: {
    inProcNet8Enabled: null
    javaVersion: (isLinux ? null : '1.8')
    linuxFxVersion: (isLinux ? 'Java|8' : null)
    netFrameworkVersion: (isLinux ? null : 'v6.0')
    powerShellVersion: null
    runtimeName: 'java'
    websiteNodeDefaultVersion: null
    websiteUsePlaceholderDotnetIsolated: null
  }
  java11: {
    inProcNet8Enabled: null
    javaVersion: (isLinux ? null : '11')
    linuxFxVersion: (isLinux ? 'Java|11' : null)
    netFrameworkVersion: (isLinux ? null : 'v6.0')
    powerShellVersion: null
    runtimeName: 'java'
    websiteNodeDefaultVersion: null
    websiteUsePlaceholderDotnetIsolated: null
  }
  java17: {
    inProcNet8Enabled: null
    javaVersion: (isLinux ? null : '17')
    linuxFxVersion: (isLinux ? 'Java|17' : null)
    netFrameworkVersion: (isLinux ? null : 'v6.0')
    powerShellVersion: null
    runtimeName: 'java'
    websiteNodeDefaultVersion: null
    websiteUsePlaceholderDotnetIsolated: null
  }
  java21: {
    inProcNet8Enabled: null
    javaVersion: null
    linuxFxVersion: 'Java|21'
    netFrameworkVersion: null
    powerShellVersion: null
    runtimeName: 'java'
    websiteNodeDefaultVersion: null
    websiteUsePlaceholderDotnetIsolated: null
  }
  net48isolated: {
    inProcNet8Enabled: null
    javaVersion: null
    linuxFxVersion: null
    netFrameworkVersion: 'v4.0'
    powerShellVersion: null
    runtimeName: 'dotnet-isolated'
    websiteNodeDefaultVersion: null
    websiteUserPlaceholderDotnetIsolated: null
  }
  net8inprocess: {
    inProcNet8Enabled: '1'
    javaVersion: null
    linuxFxVersion: (isLinux ? 'DOTNET|8.0' : null)
    netFrameworkVersion: (isLinux ? null : 'v8.0')
    powerShellVersion: null
    runtimeName: 'dotnet'
    websiteNodeDefaultVersion: null
    websiteUsePlaceholderDotnetIsolated: null
  }
  net8isolated: {
    inProcNet8Enabled: null
    javaVersion: null
    linuxFxVersion: (isLinux ? 'DOTNET-ISOLATED|8.0' : null)
    netFrameworkVersion: (isLinux ? null : 'v8.0')
    powerShellVersion: null
    runtimeName: 'dotnet-isolated'
    websiteNodeDefaultVersion: null
    websiteUsePlaceholderDotnetIsolated: '1'
  }
  net9isolated: {
    inProcNet8Enabled: null
    javaVersion: null
    linuxFxVersion: (isLinux ? 'DOTNET-ISOLATED|9.0' : null)
    netFrameworkVersion: (isLinux ? null : 'v9.0')
    powerShellVersion: null
    runtimeName: 'dotnet-isolated'
    websiteNodeDefaultVersion: null
    websiteUsePlaceholderDotnetIsolated: '1'
  }
  node18: {
    inProcNet8Enabled: null
    javaVersion: null
    linuxFxVersion: (isLinux ? 'Node|18' : null)
    netFrameworkVersion: (isLinux ? null : 'v6.0')
    powerShellVersion: null
    runtimeName: 'node'
    websiteNodeDefaultVersion: (isLinux ? null : '~18')
    websiteUsePlaceholderDotnetIsolated: null
  }
  node20: {
    inProcNet8Enabled: null
    javaVersion: null
    linuxFxVersion: (isLinux ? 'Node|20' : null)
    netFrameworkVersion: (isLinux ? null : 'v6.0')
    powerShellVersion: null
    runtimeName: 'node'
    websiteNodeDefaultVersion: (isLinux ? null : '~20')
    websiteUsePlaceholderDotnetIsolated: null
  }
  node22: {
    inProcNet8Enabled: null
    javaVersion: null
    linuxFxVersion: (isLinux ? 'Node|22' : null)
    netFrameworkVersion: (isLinux ? null : 'v6.0')
    powerShellVersion: null
    runtimeName: 'node'
    websiteNodeDefaultVersion: (isLinux ? null : '~22')
    websiteUsePlaceholderDotnetIsolated: null
  }
  powershell74: {
    inProcNet8Enabled: null
    javaVersion: null
    linuxFxVersion: (isLinux ? 'PowerShell|7.4' : null)
    netFrameworkVersion: (isLinux ? null : 'v8.0')
    powerShellVersion: (isLinux ? null : '7.4')
    runtimeName: 'powershell'
    websiteNodeDefaultVersion: null
    websiteUsePlaceholderDotnetIsolated: null
  }
  python39: {
    inProcNet8Enabled: null
    javaVersion: null
    linuxFxVersion: 'Python|3.9'
    netFrameworkVersion: null
    powerShellVersion: null
    runtimeName: 'python'
    websiteNodeDefaultVersion: null
    websiteUsePlaceholderDotnetIsolated: null
  }
  python310: {
    inProcNet8Enabled: null
    javaVersion: null
    linuxFxVersion: 'Python|3.10'
    netFrameworkVersion: null
    powerShellVersion: null
    runtimeName: 'python'
    websiteNodeDefaultVersion: null
    websiteUsePlaceholderDotnetIsolated: null
  }
  python311: {
    inProcNet8Enabled: null
    javaVersion: null
    linuxFxVersion: 'Python|3.11'
    netFrameworkVersion: null
    powerShellVersion: null
    runtimeName: 'python'
    websiteNodeDefaultVersion: null
    websiteUsePlaceholderDotnetIsolated: null
  }
  python312: {
    inProcNet8Enabled: null
    javaVersion: null
    linuxFxVersion: 'Python|3.12'
    netFrameworkVersion: null
    powerShellVersion: null
    runtimeName: 'python'
    websiteNodeDefaultVersion: null
    websiteUsePlaceholderDotnetIsolated: null
  }
}

var isLinux = (operatingSystem == 'linux')
var selectedRuntimeSetting = runtimeSettings[runtimeVersion]

// Create a Log Analytics Workspace.
resource logAnalyticsWorkspace 'Microsoft.OperationalInsights/workspaces@2023-09-01' = {
  name: logAnalyticsName
  location: location
  properties: {
    sku: {
      name: 'PerGB2018'
    }
  }
}

// Create an Application Insights Component.
resource applicationInsightsComponent 'Microsoft.Insights/components@2020-02-02' = {
  name: applicationInsightsName
  location: location
  kind: 'web'
  properties: {
    Application_Type: 'web'
    Flow_Type: 'Bluefield'
    publicNetworkAccessForIngestion: publicNetworkAccessForIngestion
    publicNetworkAccessForQuery: publicNetworkAccessForQuery
    Request_Source: 'rest'
    WorkspaceResourceId: logAnalyticsWorkspace.id
  }
}

// Create a Storage Account.
resource storageAccount 'Microsoft.Storage/storageAccounts@2023-05-01' = {
  name: storageAccountName
  location: location
  kind: 'StorageV2'
  properties: {
    allowSharedKeyAccess: false
  }
  sku: {
    name: 'Standard_LRS'
  }
}

// Create an App Service Plan.
resource appServicePlan 'Microsoft.Web/serverfarms@2024-04-01' = {
  name: appServicePlanName
  location: location
  kind: (isLinux ? 'linux' : '')
  properties: {
    reserved: (isLinux ? true : null)
  }
  sku: {
    capacity: 1
    name: appServicePlanSkuName
  }
}

// Define environment variable for the Function App.
var appSettings = union(
[
  {
    name: 'APPLICATIONINSIGHTS_CONNECTION_STRING'
    value: applicationInsightsComponent.properties.ConnectionString
  }
  {
    name: 'AzureWebJobsStorage__accountName'
    value: storageAccountName
  }
  {
    name: 'FUNCTIONS_EXTENSION_VERSION'
    value: '~4'
  }
  {
    name: 'FUNCTIONS_WORKER_RUNTIME'
    value: selectedRuntimeSetting.runtimeName
  }
], 
((selectedRuntimeSetting.runtimeName == 'java') ? [
  {
    name: 'APPLICATIONINSIGHTS_ENABLE_AGENT'
    value: 'true'
  }
] : []),
((selectedRuntimeSetting.inProcNet8Enabled != null) ? [
  {
    name: 'FUNCTIONS_INPROC_NET8_ENABLED'
    value: selectedRuntimeSetting.inProcNet8Enabled
  }
] : []),
((selectedRuntimeSetting.websiteNodeDefaultVersion != null) ? [
  {
    name: 'WEBSITE_NODE_DEFAULT_VERSION'
    value: selectedRuntimeSetting.websiteNodeDefaultVersion
  }
] : []),
((selectedRuntimeSetting.websiteUsePlaceholderDotnetIsolated != null) ? [
  {
    name: 'WEBSITE_USE_PLACEHOLDER_DOTNETISOLATED'
    value: selectedRuntimeSetting.websiteUsePlaceholderDotnetIsolated
  }
] : []) 
)

// Create a Function App.
resource functionApp 'Microsoft.Web/sites@2024-04-01' = {
  name: functionAppName
  location: location
  kind: (isLinux ? 'functionapp,linux' : 'functionapp')
  identity: {
    type: 'SystemAssigned'
  }
  properties: {
    autoGeneratedDomainNameLabelScope: autoGeneratedDomainNameLabelScope
    containerSize: 1536
    httpsOnly: true   
    publicNetworkAccess: publicNetworkAccess
    reserved: (isLinux ? true : false)
    serverFarmId: appServicePlan.id
    siteConfig: {
      alwaysOn: true
      appSettings: appSettings
      cors: {
        allowedOrigins: [
          'https://portal.azure.com'
        ]
        supportCredentials: false
      }
      javaVersion: selectedRuntimeSetting.javaVersion
      linuxFxVersion: selectedRuntimeSetting.linuxFxVersion
      netFrameworkVersion: selectedRuntimeSetting.netFrameworkVersion
      powerShellVersion: selectedRuntimeSetting.powerShellVersion
      publicNetworkAccess: publicNetworkAccess
    }
  }
}

// Get the Storage Blob Data Owner role definition.
var storageBlobDataOwnerRoleId = 'b7e6dc6d-f1e8-4753-8033-0f276bb0955b'
resource roleDefinition 'Microsoft.Authorization/roleDefinitions@2022-05-01-preview' existing = {
  scope: resourceGroup()
  name: storageBlobDataOwnerRoleId
}

// Assign the role to the Managed Identity of the Function App.
resource roleAssignment 'Microsoft.Authorization/roleAssignments@2022-04-01' = {
  name: guid(functionAppName, storageBlobDataOwnerRoleId)
  scope: storageAccount
  properties: {
    roleDefinitionId: roleDefinition.id
    principalId: functionApp.identity.principalId
  }
}

output runtimeSettingOutput runtimeSetting = selectedRuntimeSetting
output appSettingsOutput array = appSettings
